{
  "uuid": "a79a7b17-f1c7-42ce-93aa-dd08ac38af3f",
  "lastMigration": 27,
  "name": "DigitalRegistries",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3001,
  "hostname": "",
  "routes": [
    {
      "uuid": "9117f9cc-e23b-447a-bf26-186f944daf82",
      "documentation": "Allows a user to see who has read their personal data.",
      "method": "get",
      "endpoint": "data/MyPersonalDataUsage/1.0",
      "responses": [
        {
          "uuid": "af65df73-2417-459e-8156-725979689d70",
          "body": "[\n  {\n    \"ID\": \"1234567\",\n    \"ReaderID\": \"{{queryParam 'userID'}}\",\n    \"ReaderInitials\": \"JD\",\n    \"ReaderInstitutionID\": \"EE70049837\",\n    \"ReaderInstitutionName\": \"East Hospital\",\n    \"ReaderApplicationName\": \"East Hospital healthcare back office\",\n    \"SearchDateTime\": \"2017-07-21T17:32:28Z\",\n    \"Refrences\": [\n      {\n        \"ReferenceID\": \"{{queryParam 'DatabaseID'}}\"\n      }\n    ]\n  }\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns user usage data. ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "userID",
              "value": "282392302",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d5b47566-7737-4ade-9111-ed1ba9339ee6",
          "body": "[]",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns empty list of user usage data. ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "userID",
              "value": "748382347",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ae60cc46-d24e-49c4-a01f-5142edc4274d",
          "body": "\"userID or DatabaseID not provided.\"",
          "latency": 0,
          "statusCode": 400,
          "label": "No query parameters",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "userID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9d9bde34-2396-4bb0-a262-d9db32627d0d",
          "body": "\"userID or DatabaseID not found\"",
          "latency": 0,
          "statusCode": 404,
          "label": "Invalid Parameters",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "query",
              "modifier": "userID",
              "value": "invalid",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "invalid",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "27e71c27-0d59-490c-9a44-a2640e3f5a56",
          "body": "{\n  \"Invalid format of Information-Mediator-Client, should match INSTANCE/CLASS/MEMBER/SUBSYSTEM\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - Invalid mediator client format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "e60d8cd6-c4d4-499a-b2fd-dc021f31e196",
      "documentation": "Searches (Regex supported) and returns multiple records as an array-list.",
      "method": "get",
      "endpoint": "data/:registryname/:versionname",
      "responses": [
        {
          "uuid": "b8e1aca2-95f7-4677-abe8-caee59953cc3",
          "body": "{\n  \"count\": 0,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": []\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns an empty array. - Filter by regex",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "search",
              "value": "Adrien",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "query",
              "modifier": "filter",
              "value": "FirstName",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "5452e9b2-5e9c-4a44-b75e-c3554b8826bc",
          "body": "{\n  \"count\": 5,\n  \"next\": \"1\",\n  \"previous\": null,\n  \"results\":  [\n    {{# repeat 5 }}\n      {\n        \"id\": \"{{ faker 'datatype.uuid' }}\",\n        \"FirstName\": \"{{queryParam 'search'}}\",\n        \"LastName\": \"{{faker 'name.lastName'}}\",\n        \"BirthCertificateID\": \"RR-{{faker 'random.numeric' 10 }}\"\n      }\n    {{/ repeat }}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns multiple records as an array-list. - No filter ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "search",
              "value": "john",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "query",
              "modifier": "filter",
              "value": "FirstName",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "558cf138-169a-4da3-aef7-60ef71b1f29f",
          "body": "{\n  \"count\": 10,\n  \"next\": \"1\",\n  \"previous\": null,\n  \"results\":  [\n    {{# repeat 10 }}\n      {\n        \"id\": \"{{ faker 'datatype.uuid' }}\",\n        \"FirstName\": \"{{faker 'name.firstName'}}\",\n        \"LastName\": \"{{faker 'name.lastName'}}\",\n        \"BirthCertificateID\": \"RR-{{faker 'random.numeric' 10 }}\"\n      }\n    {{/ repeat }}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns multiple records as an array-list. - No filter ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "1901b0df-c7a3-4185-8951-f97022f42653",
          "body": "{\n  \"count\": 5,\n  \"next\": \"1\",\n  \"previous\": null,\n  \"results\":  [\n    {{# repeat 5 }}\n      {\n        \"id\": \"{{ faker 'datatype.uuid' }}\",\n        \"FirstName\": \"John\",\n        \"LastName\": \"{{faker 'name.lastName'}}\",\n        \"BirthCertificateID\": \"RR-{{faker 'random.numeric' 10 }}\"\n      }\n    {{/ repeat }}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns multiple records as an array-list. - All query params",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "search",
              "value": "john",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "filter",
              "value": "FirstName",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "ordering",
              "value": "descending",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "page",
              "value": "1",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "page_size",
              "value": "10",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "186bdd10-f1a9-4dd3-9016-4fbe1ae1cd9a",
          "body": "{\n  \"Invalid format of Information-Mediator-Client, should match INSTANCE/CLASS/MEMBER/SUBSYSTEM\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Returns multiple records as an array-list. - Invalid mediator client format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d857c770-774d-4050-96ad-e15fcb879479",
          "body": "{\"Information-Mediator-Client required\"}",
          "latency": 0,
          "statusCode": 400,
          "label": "No mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "429efa1e-6926-44d7-997d-8a17cd2ec520",
      "documentation": "Creates a new record in the registry database.",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/create",
      "responses": [
        {
          "uuid": "7919071c-dcbe-459a-9a87-8e44583833db",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Creates a new record in the registry database.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "params",
              "modifier": "registryname",
              "value": "registry1",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "72529bfb-0fd1-4fc3-97fc-270f630da71e",
          "body": "{\n  \"Invalid payload, registry name does not exist\"\n}\n",
          "latency": 0,
          "statusCode": 404,
          "label": "Creates a new record in the registry database.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "params",
              "modifier": "registryname",
              "value": "registry2",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "210c58c0-a928-4d77-b316-679230360cf3",
          "body": "{\n  \"Invalid payload, write.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "773538a1-5f46-4a42-b931-a110f445c1c4",
          "body": "{\n  \"Invalid payload, write.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - No Information Content Mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "4c9bd964-ea0f-41de-b06e-6425f29aee01",
      "documentation": "Searches records based on input parameters and returns boolean answer (true/false).",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/exists",
      "responses": [
        {
          "uuid": "d89a16d0-7059-42bb-8608-23de618cfcb7",
          "body": "{\n  \"answer\": {\n    \"status\": true,\n    \"message\": \"Object found from database\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records for existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "7b3d9b31-bc29-4d0a-ad56-09b17e213151",
          "body": "{\n  \"answer\": {\n    \"status\": false,\n    \"message\": \"Object not found from database\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records for non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "22459751-7025-4ef7-b659-bf5d2a77f0a1",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3863d23a-43e2-40f9-a968-bd1e8be7540d",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - No Information Content Mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "d302ad25-f6c3-4cfe-bb8c-c0d2c6cd6e72",
      "documentation": "Searches and returns one record.",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/read",
      "responses": [
        {
          "uuid": "b7239697-d182-486e-aafc-75bde27857b7",
          "body": "{\n  \"content\": {\n    \"ID\": \"c473a46c-dd2d-42f5-aca3-f318d478d736\",\n    \"FirstName\": \"{{bodyRaw 'query.content.FirstName'}}\",\n    \"LastName\": \"Wintheiser\",\n    \"BirthCertificateID\": \"RR-4419523937\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records with one params for existing entry ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Benz",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "fdb35f8a-4c63-4bf0-8fcc-5d2e08f3d5e5",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'query.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'query.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'query.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'query.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records for existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "750c11f7-297d-4093-813b-9e4e4cfdfc1e",
          "body": "{\n  \"Not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Searches records for non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "David Belt",
              "invert": true,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "bec306e5-b256-4842-9809-6e157bb81cbe",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "a4acb398-41a2-4fac-9e68-3fdf79a6e8d4",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - No Information Content Mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "f4e32199-7547-4f1c-a26e-f7f05858df60",
      "documentation": "Updates one existing record in the registry database.",
      "method": "put",
      "endpoint": "data/:registryname/:versionname/update",
      "responses": [
        {
          "uuid": "d96dc4ea-e98b-4fbf-a460-8dc2327c98b9",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Update existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "eff236bb-eb54-42c7-9166-7f1d09ffcf12",
          "body": "{\n  \"Record matching query not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Update non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "22a95fee-566d-420c-8844-726968eabdd3",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "91e2d050-2a7e-4a98-90a3-cbb33ad1f07b",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - write part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "cc6141fc-6082-4519-b1e1-9a7601a3817b",
      "documentation": "Updates multiple records in the registry database that match the input query.",
      "method": "put",
      "endpoint": "data/:registryname/:versionname/update-entries",
      "responses": [
        {
          "uuid": "8a7ae3d7-c45c-4717-94cd-3f9cde06f388",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "Update existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "Alfie",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.ID",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.ID",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.LastName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.LastName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.BirthCertificateID",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.BirthCertificateID",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "25875558-1ce3-4db0-9700-5c9a470aa4c6",
          "body": "{\n  \"Record matching query not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Update non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "Alfie",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.ID",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.ID",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.LastName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.LastName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.BirthCertificateID",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.BirthCertificateID",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "de95d1a8-85ec-4515-af4c-d416891e430d",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d83ba844-b3d9-4fdc-9e2c-f1fc60efdabd",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - write part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "62d9db7e-2676-40c0-b462-04fecec019b7",
          "body": "{\n  \"Invalid payload, query.content.FirstName, query.content.ID, query.content.LastName or query.content.BirthCertificateID not provided\"\n  \n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part missing fields",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.ID",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.ID",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.LastName",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.LastName",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.BirthCertificateID",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.BirthCertificateID",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "2d835466-f4ac-4f5a-bd1c-b7d67f4ab615",
      "documentation": "API updates existing record if matching with input parameters is successful. If record is not found the API will create a new record.",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/update-or-create",
      "responses": [
        {
          "uuid": "b2045883-ac22-49cf-954e-f0722afb5323",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Update existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "Johny",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "query.content.LastName",
              "value": "Small",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.LastName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "ba8a0781-65c0-46af-a716-5652e06edc3d",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Create new entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "Johny",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "query.content.LastName",
              "value": "Small",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.LastName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3e3a30b0-bbd5-41f5-92f6-217713557a4d",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "1427bf02-7822-4115-8ec6-1f533d938c37",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - write part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "ecffa065-a196-46ef-94bc-92094253a46e",
      "documentation": "Delete record.",
      "method": "delete",
      "endpoint": "data/:registryname/:versionname/:ID/delete",
      "responses": [
        {
          "uuid": "23aecb69-312e-4abc-8bc0-1d4c1d8f6d33",
          "body": "{\n  \"Success\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Delete existing record based on ID",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ID",
              "value": "id231Q",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "params",
              "modifier": "ID",
              "value": "[a-zA-Z]{2}\\d{3}[a-zA-Z0-9]{1}",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "c421fe9a-38fe-4ad7-b245-6eef2bdeabe1",
          "body": "{\n  \"Provided id does not exist in the database\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Delete record - ID does not exist",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ID",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "8d90e854-eca4-4f41-b1da-a61826c10997",
      "documentation": "Searches and returns one record’s one field value.",
      "method": "get",
      "endpoint": "data/:registryname/:versionname/:uuid/read-value/:field.:ext",
      "responses": [
        {
          "uuid": "deaae6f9-450c-477e-a5f0-2318a6f17ce4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 200,
          "label": "Return empty field value in string format ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "3dcad39a-9abb-4552-954d-c62958d44ec9",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ext",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "1118011c-8273-4c2f-9f3c-6cf424f855e4",
          "body": "\"John Helmut\"",
          "latency": 0,
          "statusCode": 200,
          "label": "Return field value in string format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "2dcad39a-9abb-4552-954d-c62958d44ec5",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ext",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ba444239-9043-4475-a235-7ff970774448",
          "body": "{\n  \"Invalid format of Information-Mediator-Client, should match INSTANCE/CLASS/MEMBER/SUBSYSTEM\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - Invalid mediator client format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9830d04a-ffb9-41d3-8cbf-a49b37a6185c",
          "body": "\"Invalid `ext` URL param format (expected matching regex [a-zA-Z]+), provided: {{urlParam 'ext'}}\"",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - invalid ext format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ext",
              "value": "[a-zA-Z]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "da7554db-9609-4ead-a900-e9a2b69b03ad",
          "body": "\"Invalid uuid format. Expected uuid4, validated against `[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}` regex\"",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - invalid UUID format ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "cc838aed-381f-4dff-8591-bb494c2ee50d",
          "body": "\"Invalid `field` URL param format (expected matching regex [a-zA-Z]+), provided: {{urlParam 'field'}}\"",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - invalid field name format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7cc9e2f6-03b8-459b-9ce2-eae8b6a01dbb",
          "body": "\"User does not exixt\"",
          "latency": 0,
          "statusCode": 200,
          "label": "Return default response",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ext",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "f4f2dd3c-888e-4e7a-873b-b3c2cb9a2246",
      "documentation": "API endpoint that allows user to get database information with schema",
      "method": "get",
      "endpoint": "database/:id",
      "responses": [
        {
          "uuid": "8b4b5cf8-a879-4d4e-b9ad-ddbd95a43f90",
          "body": "{\n  \"id\": {{urlParam 'id'}},\n  \"version\": \"2.7\",\n  \"name\": \"MCTS\",\n  \"description\": \"Database holding information about MCTS objects\",\n  \"institution\": \"Ministry of Social Affairs\",\n  \"number_format\": \"{code}{indexNoByCode}\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ID\": {\n        \"type\": \"string\",\n        \"triggers\": [\n          {\n            \"conditions\": [\n              {\n                \"logic\": \"==\",\n                \"value\": \"\",\n                \"gate\": \"&&\"\n              }\n            ],\n            \"actions\": [\n              {\n                \"type\": \"set-value\",\n                \"value\": \"MCTS{indexNoByCode}\",\n                \"field_id\": 1\n              }\n            ]\n          }\n        ],\n        \"primaryKey\": true,\n        \"readOnly\": true,\n        \"description\": \"Registration ID\",\n        \"example\": \"MCTS31\",\n        \"id\": 1\n      },\n      \"Child\": {\n        \"type\": \"string\",\n        \"properties\": {\n          \"ID\": {\n            \"type\": \"string\",\n            \"description\": \"Child ID\",\n            \"example\": \"ID2\",\n            \"id\": 13\n          }\n        }\n      }\n    },\n    \"incrementIndex\": 20,\n    \"required\": [\n      \"ID\"\n    ]\n  },\n  \"schema_tags\": [\n    {\n      \"name\": \"\",\n      \"path\": \"/Child/Citizenship\",\n      \"is_fulltext\": true\n    }\n  ],\n  \"schema_flags\": [\n    {\n      \"name\": \"mandatory\",\n      \"path\": \"/ID\"\n    }\n  ],\n  \"fields_uniques\": [\n    [\n      \"\"\n    ]\n  ],\n  \"is_draft\": false,\n  \"is_disabled\": false,\n  \"is_archived\": false,\n  \"modified_at\": \"2021-10-03T08:35:01.775915Z\",\n  \"by_user_name\": \"ingmar.dev\",\n  \"by_user_auth_id\": 1,\n  \"by_on_behalf_of_user_auth_id\": 1,\n  \"by_on_behalf_of_user_name\": \"null\",\n  \"generic_services\": [\n    {\n      \"service_id\": 1,\n      \"name\": \"data-create\",\n      \"is_visible\": true,\n      \"used_count\": 0\n    }\n  ],\n  \"data_index_increment\": 0,\n  \"has_logo\": false\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Existing database",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "id",
              "value": "^((?:[1-9][0-9]*)(?:\\.[0-9]+)?)$",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "id",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "73a21e7f-cab7-461a-91ae-0206f3c7fb8f",
      "documentation": "API endpoint that allows user to get information about all databases",
      "method": "get",
      "endpoint": "databases",
      "responses": [
        {
          "uuid": "eb0263ec-5c73-44c4-960a-23d613ac481d",
          "body": "{\n  \"id\": 85,\n  \"name\": \"Mother and Child\",\n  \"code\": \"MCTS\",\n  \"databases\": [\n    {\n      \"id\": 353,\n      \"version\": \"2.7\",\n      \"name\": \"MCTS\",\n      \"description\": \"Database holding information about MCTS objects\",\n      \"institution\": \"Ministry of Social Affairs\",\n      \"number_format\": \"{code}{indexNoByCode}\",\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ID\": {\n            \"type\": \"string\",\n            \"triggers\": [\n              {\n                \"conditions\": [\n                  {\n                    \"logic\": \"==\",\n                    \"value\": \"\",\n                    \"gate\": \"&&\"\n                  }\n                ],\n                \"actions\": [\n                  {\n                    \"type\": \"set-value\",\n                    \"value\": \"MCTS{indexNoByCode}\",\n                    \"field_id\": 1\n                  }\n                ]\n              }\n            ],\n            \"primaryKey\": true,\n            \"readOnly\": true,\n            \"description\": \"Registration ID\",\n            \"example\": \"MCTS31\",\n            \"id\": 1\n          },\n          \"Child\": {\n            \"type\": \"string\",\n            \"properties\": {\n              \"ID\": {\n                \"type\": \"string\",\n                \"description\": \"Child ID\",\n                \"example\": \"ID2\",\n                \"id\": 13\n              }\n            }\n          }\n        },\n        \"incrementIndex\": 20,\n        \"required\": [\n          \"ID\"\n        ]\n      },\n      \"schema_tags\": [\n        {\n          \"name\": \"\",\n          \"path\": \"/Child/Citizenship\",\n          \"is_fulltext\": true\n        }\n      ],\n      \"schema_flags\": [\n        {\n          \"name\": \"mandatory\",\n          \"path\": \"/ID\"\n        }\n      ],\n      \"fields_uniques\": [\n        [\n          \"aa\"\n        ]\n      ],\n      \"is_draft\": false,\n      \"is_disabled\": false,\n      \"is_archived\": false,\n      \"modified_at\": \"2021-10-03T08:35:01.775915Z\",\n      \"by_user_name\": \"ingmar.dev\",\n      \"by_user_auth_id\": 1,\n      \"by_on_behalf_of_user_auth_id\": 1,\n      \"by_on_behalf_of_user_name\": \"string\",\n      \"generic_services\": [\n        {\n          \"service_id\": 1,\n          \"name\": \"data-create\",\n          \"is_visible\": true,\n          \"used_count\": 0\n        }\n      ],\n      \"data_index_increment\": 0,\n      \"has_logo\": false\n    }\n  ],\n  \"group_id\": 10,\n  \"order\": 76,\n  \"data_index_increment\": 3\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Existing database",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "d02ecd5c-360f-4de6-a172-109a352f8191",
      "documentation": "API endpoint that allows user to delete database schema",
      "method": "delete",
      "endpoint": "database/:id",
      "responses": [
        {
          "uuid": "c97231c3-1b4d-4729-97cc-9c2b3ba89398",
          "body": "\"Success\"\n\n",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "id",
              "value": "^((?:[1-9][0-9]*)(?:\\.[0-9]+)?)$",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    },
    {
      "uuid": "5b0282d8-3099-4852-808e-deb0dea6be71",
      "documentation": "API endpoint that allows user to create or modify database schema",
      "method": "post",
      "endpoint": "database/modify",
      "responses": [
        {
          "uuid": "83f9b890-7ad4-4b57-a81e-735578e80cad",
          "body": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"ID\": {\n      \"type\": \"string\",\n      \"triggers\": [\n        {\n          \"conditions\": [\n            {\n              \"logic\": \"==\",\n              \"value\": \"\",\n              \"gate\": \"&&\"\n            }\n          ],\n          \"actions\": [\n            {\n              \"type\": \"set-value\",\n              \"value\": \"MCTS{indexNoByCode}\",\n              \"field_id\": 1\n            }\n          ]\n        }\n      ],\n      \"primaryKey\": true,\n      \"readOnly\": true,\n      \"description\": \"Registration ID\",\n      \"example\": \"MCTS31\",\n      \"id\": 1\n    },\n    \"Child\": {\n      \"type\": \"string\",\n      \"properties\": {\n        \"ID\": {\n          \"type\": \"string\",\n          \"description\": \"Child ID\",\n          \"example\": \"ID2\",\n          \"id\": 13\n        }\n      }\n    }\n  },\n  \"incrementIndex\": 20,\n  \"required\": [\n    \"ID\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Database schema modified. ",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "147e5971-ff62-4f76-8596-2a8af2d5c42c",
          "body": "\"At least `group_name`, `catalog_name`, `code` and `schema` fields are required in request payload\"",
          "latency": 0,
          "statusCode": 400,
          "label": "No required data in body ",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "body",
              "modifier": "group_name",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "catalog_name",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "schema",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null,
      "type": "http"
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [
    {
      "key": "Content-Type",
      "value": "application/json"
    }
  ],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": [],
  "folders": [],
  "rootChildren": [
    {
      "type": "route",
      "uuid": "9117f9cc-e23b-447a-bf26-186f944daf82"
    },
    {
      "type": "route",
      "uuid": "e60d8cd6-c4d4-499a-b2fd-dc021f31e196"
    },
    {
      "type": "route",
      "uuid": "429efa1e-6926-44d7-997d-8a17cd2ec520"
    },
    {
      "type": "route",
      "uuid": "4c9bd964-ea0f-41de-b06e-6425f29aee01"
    },
    {
      "type": "route",
      "uuid": "d302ad25-f6c3-4cfe-bb8c-c0d2c6cd6e72"
    },
    {
      "type": "route",
      "uuid": "f4e32199-7547-4f1c-a26e-f7f05858df60"
    },
    {
      "type": "route",
      "uuid": "cc6141fc-6082-4519-b1e1-9a7601a3817b"
    },
    {
      "type": "route",
      "uuid": "2d835466-f4ac-4f5a-bd1c-b7d67f4ab615"
    },
    {
      "type": "route",
      "uuid": "ecffa065-a196-46ef-94bc-92094253a46e"
    },
    {
      "type": "route",
      "uuid": "8d90e854-eca4-4f41-b1da-a61826c10997"
    },
    {
      "type": "route",
      "uuid": "f4f2dd3c-888e-4e7a-873b-b3c2cb9a2246"
    },
    {
      "type": "route",
      "uuid": "73a21e7f-cab7-461a-91ae-0206f3c7fb8f"
    },
    {
      "type": "route",
      "uuid": "d02ecd5c-360f-4de6-a172-109a352f8191"
    },
    {
      "type": "route",
      "uuid": "5b0282d8-3099-4852-808e-deb0dea6be71"
    }
  ]
}