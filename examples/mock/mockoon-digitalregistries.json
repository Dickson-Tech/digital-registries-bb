{
  "uuid": "26827aa0-9094-4f0a-be6b-9cf6762680b9",
  "lastMigration": 24,
  "name": "DigitalRegistries",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3001,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "efe3d4be-5b7f-4b10-8ce4-25d3bae82f42",
      "documentation": "Allows a user to see who has read their personal data.",
      "method": "get",
      "endpoint": "data/MyPersonalDataUsage/1.0",
      "responses": [
        {
          "uuid": "fc6c9cde-beb6-46de-9289-3e651770363c",
          "body": "[\n  {\n    \"ID\": \"1234567\",\n    \"ReaderID\": \"{{queryParam 'userID'}}\",\n    \"ReaderInitials\": \"JD\",\n    \"ReaderInstitutionID\": \"EE70049837\",\n    \"ReaderInstitutionName\": \"East Hospital\",\n    \"ReaderApplicationName\": \"East Hospital healthcare back office\",\n    \"SearchDateTime\": \"2017-07-21T17:32:28Z\",\n    \"Refrences\": [\n      {\n        \"ReferenceID\": \"{{queryParam 'DatabaseID'}}\"\n      }\n    ]\n  }\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns user usage data. ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "userID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "6fbe0633-8014-4207-b22e-3fa1f180f13e",
          "body": "\"userID or DatabaseID not provided.\"",
          "latency": 0,
          "statusCode": 400,
          "label": "No query parameters",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "userID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "[a-zA-z0-9_]+",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0098dc7d-0515-4d45-af53-ee3f7b078d01",
          "body": "\"userID or DatabaseID not found\"",
          "latency": 0,
          "statusCode": 404,
          "label": "Invalid Parameters",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "query",
              "modifier": "userID",
              "value": "invalid",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "query",
              "modifier": "DatabaseID",
              "value": "invalid",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "95157d57-d146-4d3b-ae8c-666550a21139",
      "documentation": "Searches (Regex supported) and returns multiple records as an array-list.",
      "method": "get",
      "endpoint": "data/:registryname/:versionname",
      "responses": [
        {
          "uuid": "14d5e633-c157-4917-9002-e1651c359e33",
          "body": "{\n  \"count\": 10,\n  \"next\": \"1\",\n  \"previous\": null,\n  \"results\":  [\n    {{# repeat 10 }}\n      {\n        \"id\": \"{{ faker 'datatype.uuid' }}\",\n        \"FirstName\": \"{{faker 'name.firstName'}}\",\n        \"LastName\": \"{{faker 'name.lastName'}}\",\n        \"BirthCertificateID\": \"RR-{{faker 'random.numeric' 10 }}\"\n      }\n    {{/ repeat }}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns multiple records as an array-list. - No filter ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d42d1dc7-cc2f-4647-836a-d9cc479c55ce",
          "body": "{\n  \"count\": 5,\n  \"next\": \"1\",\n  \"previous\": null,\n  \"results\":  [\n    {{# repeat 5 }}\n      {\n        \"id\": \"{{ faker 'datatype.uuid' }}\",\n        \"FirstName\": \"John Helmut\",\n        \"LastName\": \"{{faker 'name.lastName'}}\",\n        \"BirthCertificateID\": \"RR-{{faker 'random.numeric' 10 }}\"\n      }\n    {{/ repeat }}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns multiple records as an array-list. - Filter by regex",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "search",
              "value": "john",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "query",
              "modifier": "filter",
              "value": "FirstName",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "78fd46b3-89fc-4ee0-9ad3-b3a00d2c2c73",
          "body": "{\n  \"count\": 5,\n  \"next\": \"1\",\n  \"previous\": null,\n  \"results\":  [\n    {{# repeat 5 }}\n      {\n        \"id\": \"{{ faker 'datatype.uuid' }}\",\n        \"FirstName\": \"John\",\n        \"LastName\": \"{{faker 'name.lastName'}}\",\n        \"BirthCertificateID\": \"RR-{{faker 'random.numeric' 10 }}\"\n      }\n    {{/ repeat }}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Returns multiple records as an array-list. - All query params",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "search",
              "value": "john",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "filter",
              "value": "FirstName",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "ordering",
              "value": "descending",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "page",
              "value": "1",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "page_size",
              "value": "10",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "6849fe6c-4731-4b62-9def-f16db900f8e5",
          "body": "{\n  \"Invalid format of Information-Mediator-Client, should match INSTANCE/CLASS/MEMBER/SUBSYSTEM\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Returns multiple records as an array-list. - Invalid mediator client format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "2edd01a6-fa0b-455c-9c59-f48f85d7f6c8",
          "body": "{\"Information-Mediator-Client required\"}",
          "latency": 0,
          "statusCode": 400,
          "label": "No mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "1d46ed91-a9ba-4f46-aa8b-626f7c4d1532",
      "documentation": "Creates a new record in the registry database.",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/create",
      "responses": [
        {
          "uuid": "21ff3e7f-da22-4347-9992-9bdd7dd6b525",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Creates a new record in the registry database.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9b662c83-56f7-4c97-939c-69ae9bee8f90",
          "body": "{\n  \"Invalid payload, write.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "79a9f102-c967-4a9e-8316-b67a5da9d4b1",
          "body": "{\n  \"Invalid payload, write.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - No Information Content Mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "92570999-57cb-420f-acd5-25d9fc30e7e2",
      "documentation": "Searches records based on input parameters and returns boolean answer (true/false).",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/exists",
      "responses": [
        {
          "uuid": "87f5d71a-aeb5-4f32-bcfd-11a26bff1aeb",
          "body": "{\n  \"answer\": {\n    \"status\": true,\n    \"message\": \"Object found from database\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records for existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "19f64261-ce57-42f9-8379-0eb0eb78184e",
          "body": "{\n  \"answer\": {\n    \"status\": false,\n    \"message\": \"Object not found from database\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records for non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8fd170d8-e5c1-4720-a107-36166c421b78",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "06443f14-ed52-415c-b493-9b43dae25cf4",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - No Information Content Mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a389b1e4-b982-4f4c-8361-82c77f1fe519",
      "documentation": "Searches and returns one record.",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/read",
      "responses": [
        {
          "uuid": "7cdbe51e-27f7-49ef-b590-edec16c75edd",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'query.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'query.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'query.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'query.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Searches records for existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "7b110e93-a767-4474-87f1-9975c4293055",
          "body": "{\n  \"Not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Searches records for non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "74a56f78-92ce-47c1-890b-774a5fa81ef7",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "990cef4b-52d1-4007-b274-0e4fe153d4c1",
          "body": "{\n  \"Invalid payload, query.content not provided\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - No Information Content Mediator",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "da92a12a-f699-4d13-a839-5efc116b9888",
      "documentation": "Updates one existing record in the registry database.",
      "method": "put",
      "endpoint": "data/:registryname/:versionname/update",
      "responses": [
        {
          "uuid": "e71a9805-0ed3-49a5-8298-e09eeed8f36b",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "Update existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "410cf357-fbc1-4c27-8395-f33a601d33b5",
          "body": "{\n  \"Record matching query not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Update non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0298ba79-16d1-4e60-9dc7-609e07380fa6",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3102a7b9-563a-454a-a7a4-3e245a2be301",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - write part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c403947f-b940-4729-98b7-db5a31526557",
      "documentation": "Updates multiple records in the registry database that match the input query.",
      "method": "put",
      "endpoint": "data/:registryname/:versionname/update-entries",
      "responses": [
        {
          "uuid": "b3e10204-767a-4429-8eda-e19bcca13fc7",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "Update existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "aeb77d6f-3069-4ead-a23b-3c8f105fc85b",
          "body": "{\n  \"Record matching query not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Update non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b75eb394-53e2-4550-813c-2a839a43c6c0",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "24cd2cbd-4c4e-4e6a-ab79-1d1fa3b7cc55",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - write part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "326d9c6d-1c07-4ef2-a51b-ca60dd45c2fe",
      "documentation": "API updates existing record if matching with input parameters is successful. If record is not found the API will create a new record.",
      "method": "post",
      "endpoint": "data/:registryname/:versionname/update-or-create",
      "responses": [
        {
          "uuid": "e9a23cca-7c5e-4ca6-a11b-361af7ccece8",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Update existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": false,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d9cae204-3f66-4a2d-9ac4-c4c9b48fcabd",
          "body": "{\n  \"content\": {\n    \"ID\": \"{{bodyRaw 'write.content.ID'}}\",\n    \"FirstName\": \"{{bodyRaw 'write.content.FirstName'}}\",\n    \"LastName\": \"{{bodyRaw 'write.content.LastName'}}\",\n    \"BirthCertificateID\": \"{{bodyRaw 'write.content.BirthCertificateID'}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Create new entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "70cb22ab-3974-46aa-bbcf-c042cf1f1ebf",
          "body": "{\n  \"Record matching query not found.\"\n}",
          "latency": 0,
          "statusCode": 404,
          "label": "Update non-existing entry",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "query.content.FirstName",
              "value": "John Helmut",
              "invert": true,
              "operator": "equals"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "write.content.FirstName",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0fea1d55-f417-468f-82ed-d045e3733672",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - query part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "query.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "5f16b721-221d-4b9f-9e46-fa9e6bd1c4f6",
          "body": "{\n  \"Query not provided.\"\n}",
          "latency": 0,
          "statusCode": 400,
          "label": "Invalid payload - write part.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "write.content",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "82475806-7749-4678-95ee-f08eaab30075",
      "documentation": "Delete record.",
      "method": "delete",
      "endpoint": "data/:registryname/:versionname/:ID/delete",
      "responses": [
        {
          "uuid": "25b405aa-200e-4a4a-8acf-50f6bae0a6a7",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Delete existing record based on ID",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ID",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9cc2fd57-455a-4550-b52c-79575cc28a08",
          "body": "",
          "latency": 0,
          "statusCode": 400,
          "label": "Delete recird - invalid id",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ID",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "43d1cf09-ab79-4aee-9432-562f221a8b12",
      "documentation": "Searches and returns one record’s one field value.",
      "method": "get",
      "endpoint": "data/:registryname/:versionname/:uuid/read-value/:field.:ext",
      "responses": [
        {
          "uuid": "7714e3f8-609d-46be-8ccc-59957547c527",
          "body": "\"John Helmut\"",
          "latency": 0,
          "statusCode": 200,
          "label": "Return field value in string format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "ext",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d44ef995-25d0-4fc2-948b-02a34a48d2a2",
          "body": "\"Invalid uuid format. Expected uuid4, validated against `[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}` regex\"",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - invalid UUID format ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "a4735649-3d38-41a3-9512-2acea37790c9",
          "body": "\"Invalid `field` URL param format (expected matching regex [a-zA-Z]+), provided: {{urlParam 'field'}}\"",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - invalid field name format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e2cd30e4-2cee-4590-912d-4048044c7fac",
          "body": "\"Invalid `ext` URL param format (expected matching regex [a-zA-Z]+), provided: {{urlParam 'ext'}}\"",
          "latency": 0,
          "statusCode": 400,
          "label": "Return field value in string format - invalid ext format",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "uuid",
              "value": "[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "field",
              "value": "[a-zA-Z]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "ext",
              "value": "[a-zA-Z]+",
              "invert": true,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d38592d2-1ab7-44bc-a969-8316535172d2",
      "documentation": "API endpoint that allows user to get database information with schema",
      "method": "get",
      "endpoint": "database/:id",
      "responses": [
        {
          "uuid": "3fadb5c0-6984-491f-961b-3d7034e45efc",
          "body": "{\n  \"id\": {{queryParamRaw 'id'}},\n  \"version\": \"2.7\",\n  \"name\": \"MCTS\",\n  \"description\": \"Database holding information about MCTS objects\",\n  \"institution\": \"Ministry of Social Affairs\",\n  \"number_format\": \"{code}{indexNoByCode}\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ID\": {\n        \"type\": \"string\",\n        \"triggers\": [\n          {\n            \"conditions\": [\n              {\n                \"logic\": \"==\",\n                \"value\": \"\",\n                \"gate\": \"&&\"\n              }\n            ],\n            \"actions\": [\n              {\n                \"type\": \"set-value\",\n                \"value\": \"MCTS{indexNoByCode}\",\n                \"field_id\": 1\n              }\n            ]\n          }\n        ],\n        \"primaryKey\": true,\n        \"readOnly\": true,\n        \"description\": \"Registration ID\",\n        \"example\": \"MCTS31\",\n        \"id\": 1\n      },\n      \"Child\": {\n        \"type\": \"string\",\n        \"properties\": {\n          \"ID\": {\n            \"type\": \"string\",\n            \"description\": \"Child ID\",\n            \"example\": \"ID2\",\n            \"id\": 13\n          }\n        }\n      }\n    },\n    \"incrementIndex\": 20,\n    \"required\": [\n      \"ID\"\n    ]\n  },\n  \"schema_tags\": [\n    {\n      \"name\": \"\",\n      \"path\": \"/Child/Citizenship\",\n      \"is_fulltext\": true\n    }\n  ],\n  \"schema_flags\": [\n    {\n      \"name\": \"mandatory\",\n      \"path\": \"/ID\"\n    }\n  ],\n  \"fields_uniques\": [\n    [\n      \"\"\n    ]\n  ],\n  \"is_draft\": {{faker 'datatype.boolean'}},\n  \"is_disabled\": {{faker 'datatype.boolean'}},\n  \"is_archived\": {{faker 'datatype.boolean'}},\n  \"modified_at\": \"2021-10-03T08:35:01.775915Z\",\n  \"by_user_name\": \"ingmar.dev\",\n  \"by_user_auth_id\": 1,\n  \"by_on_behalf_of_user_auth_id\": {{faker 'datatype.number'}},\n  \"by_on_behalf_of_user_name\": \"\",\n  \"generic_services\": [\n    {\n      \"service_id\": 1,\n      \"name\": \"data-create\",\n      \"is_visible\": true,\n      \"used_count\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"data_index_increment\": {{faker 'datatype.number'}},\n  \"has_logo\": {{faker 'datatype.boolean'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Existing database.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "id",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9d04d925-ee51-44bb-8704-9fdd6ead70b2",
          "body": "\"Query Param id not provided.\"",
          "latency": 0,
          "statusCode": 400,
          "label": "No obligatory id query param.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "id",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b944052b-2627-4527-9109-d120888fb946",
      "documentation": "API endpoint that allows user to get information about all databases",
      "method": "get",
      "endpoint": "databases",
      "responses": [
        {
          "uuid": "ba5e908b-a99b-4ae9-9f4c-8e629655ac66",
          "body": "{\n  \"id\": 85,\n  \"name\": \"Mother and Child\",\n  \"code\": \"MCTS\",\n  \"databases\": [\n    {\n      \"id\": 353,\n      \"version\": \"2.7\",\n      \"name\": \"MCTS\",\n      \"description\": \"Database holding information about MCTS objects\",\n      \"institution\": \"Ministry of Social Affairs\",\n      \"number_format\": \"{code}{indexNoByCode}\",\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ID\": {\n            \"type\": \"string\",\n            \"triggers\": [\n              {\n                \"conditions\": [\n                  {\n                    \"logic\": \"==\",\n                    \"value\": \"\",\n                    \"gate\": \"&&\"\n                  }\n                ],\n                \"actions\": [\n                  {\n                    \"type\": \"set-value\",\n                    \"value\": \"MCTS{indexNoByCode}\",\n                    \"field_id\": 1\n                  }\n                ]\n              }\n            ],\n            \"primaryKey\": true,\n            \"readOnly\": true,\n            \"description\": \"Registration ID\",\n            \"example\": \"MCTS31\",\n            \"id\": 1\n          },\n          \"Child\": {\n            \"type\": \"string\",\n            \"properties\": {\n              \"ID\": {\n                \"type\": \"string\",\n                \"description\": \"Child ID\",\n                \"example\": \"ID2\",\n                \"id\": 13\n              }\n            }\n          }\n        },\n        \"incrementIndex\": 20,\n        \"required\": [\n          \"ID\"\n        ]\n      },\n      \"schema_tags\": [\n        {\n          \"name\": \"\",\n          \"path\": \"/Child/Citizenship\",\n          \"is_fulltext\": true\n        }\n      ],\n      \"schema_flags\": [\n        {\n          \"name\": \"mandatory\",\n          \"path\": \"/ID\"\n        }\n      ],\n      \"fields_uniques\": [\n        [\n          \"\"\n        ]\n      ],\n      \"is_draft\": {{faker 'datatype.boolean'}},\n      \"is_disabled\": {{faker 'datatype.boolean'}},\n      \"is_archived\": {{faker 'datatype.boolean'}},\n      \"modified_at\": \"2021-10-03T08:35:01.775915Z\",\n      \"by_user_name\": \"ingmar.dev\",\n      \"by_user_auth_id\": 1,\n      \"by_on_behalf_of_user_auth_id\": {{faker 'datatype.number'}},\n      \"by_on_behalf_of_user_name\": \"\",\n      \"generic_services\": [\n        {\n          \"service_id\": 1,\n          \"name\": \"data-create\",\n          \"is_visible\": true,\n          \"used_count\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"data_index_increment\": {{faker 'datatype.number'}},\n      \"has_logo\": {{faker 'datatype.boolean'}}\n    }\n  ],\n  \"group_id\": 10,\n  \"order\": 76,\n  \"data_index_increment\": 3\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Existing database.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "05ff618d-99c2-48db-9e3e-5554a211eae3",
          "body": "\"Query Param id not provided.\"",
          "latency": 0,
          "statusCode": 400,
          "label": "No obligatory id query param.",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "id",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "03760bcc-ce91-4c78-a463-0b18885cf208",
      "documentation": "API endpoint that allows user to delete database schema",
      "method": "delete",
      "endpoint": "database/:id",
      "responses": [
        {
          "uuid": "b5acca6f-21c1-4363-807e-f712c9d089bf",
          "body": "\"Success\"",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "params",
              "modifier": "id",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "cb17918a-cf0d-4974-bd1f-5c644eb88da9",
          "body": "\"Failure\"",
          "latency": 0,
          "statusCode": 400,
          "label": "No obligatory `id` query param",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "query",
              "modifier": "id",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "ddcea13a-2ebf-4aeb-bf17-6cab532139ac",
      "documentation": "API endpoint that allows user to create or modify database schema",
      "method": "post",
      "endpoint": "database/modify",
      "responses": [
        {
          "uuid": "abdabb7c-4859-416c-8161-ab72e231b93f",
          "body": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"ID\": {\n      \"type\": \"string\",\n      \"triggers\": [\n        {\n          \"conditions\": [\n            {\n              \"logic\": \"==\",\n              \"value\": \"\",\n              \"gate\": \"&&\"\n            }\n          ],\n          \"actions\": [\n            {\n              \"type\": \"set-value\",\n              \"value\": \"MCTS{indexNoByCode}\",\n              \"field_id\": 1\n            }\n          ]\n        }\n      ],\n      \"primaryKey\": true,\n      \"readOnly\": true,\n      \"description\": \"Registration ID\",\n      \"example\": \"MCTS31\",\n      \"id\": 1\n    },\n    \"Child\": {\n      \"type\": \"string\",\n      \"properties\": {\n        \"ID\": {\n          \"type\": \"string\",\n          \"description\": \"Child ID\",\n          \"example\": \"ID2\",\n          \"id\": 13\n        }\n      }\n    }\n  },\n  \"incrementIndex\": 20,\n  \"required\": [\n    \"ID\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Database schema modified. ",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "header",
              "modifier": "Information-Mediator-Client",
              "value": "[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+",
              "invert": false,
              "operator": "regex"
            },
            {
              "target": "body",
              "modifier": "group_name",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "catalog_name",
              "value": "",
              "invert": true,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "schema",
              "value": "",
              "invert": true,
              "operator": "null"
            }
          ],
          "rulesOperator": "AND",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "afb216ba-3452-40d8-bf4d-a7c7c7bdea82",
          "body": "\"At least `group_name`, `catalog_name`, `code` and `schema` fields are required in request payload\"",
          "latency": 0,
          "statusCode": 200,
          "label": "No required data in body ",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "body",
              "modifier": "group_name",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "catalog_name",
              "value": "",
              "invert": false,
              "operator": "null"
            },
            {
              "target": "body",
              "modifier": "schema",
              "value": "",
              "invert": false,
              "operator": "null"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [
    {
      "key": "Content-Type",
      "value": "application/json"
    }
  ],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": []
}